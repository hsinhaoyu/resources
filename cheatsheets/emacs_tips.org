* Org-roam workflow
- find files, new files (c-C r f): =C-c n e= (or =consult-org-roam-file-find=)
- backlinks: =C-c r l= (or =consult-org-roam-backlinks=), or =org-roam-buffer-toggle=
- search: =C-c r s= (or =consult-org-roam-search=)
- new daily: (=C-c r j=) =org-roam-dailies-capture-today=
- update database: =org-roam-db-sync=
- create a node: =org-id-get-create=

* Writing
- =ispell-word= suggests correct spelling

* Movements: s-expressions and strings
| key   | function                                      |
|-------+-----------------------------------------------|
| C-M-f | move forward by s-exp (=forward-sexp=)        |
| C-M-b | move backward by s-exp                        |
| C-M-d | move down into a list                         |
| C-M-u | move down into a list                         |
| C-M-n | move forward to the next list (=forward-list=) |
| C-M-p | move backward to the previous list            |
|       |                                               |

- When the point is inside a s-expression or a string, to go to the beginning of the s-expression, use =C-M-u= (go "up" an expression)
- When the point is inside a s-expression or a string, to go to the end of the s-expression, use =C-M-u= and then =C-M-f= (go "forward")
- To kill a s-expression or string, =C-M-u= and then =C-M-k= (=kill-sexp=).

* Window management
=M-x window-swap-states= swaps the content of two windows.

* Deleting
- Delete the word that the point is in: M-b then M-d (i.e., first move to the beginning of a word, and then delete it)

* Coding: spell check existing code
=M-x ispell-comments-and-strings=

=M-i= Use i-menu to jump to definitions

*  Coding: movement
| key   | function                            |   |
|-------+-------------------------------------+---|
| C-M-a | move to the beginning of a function |   |
| C-M-e | move to the end of  a function      |   |
|       |                                     |   |
  

* Coding: LISP formatting
=C-m-q= (indent-pp-sexp): re-indent LISP

* Scheme
reference: https://github.com/emacsmirror/geiser
Start Guile interpreter: =M-x geiser=
From a file, send a s-expression to Guile: =C-x C-e=
Expand macro: =C-c C-m=

* packages
Use =list-packages= to enter the package manager
hit =U= to mark all packages that need upgrades
to see them, filter marked
